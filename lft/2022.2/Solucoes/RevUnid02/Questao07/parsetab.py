
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUIVALENTIMPLIESleftORNORleftXORleftANDNANDrightNOTAND EQUIVALENT FALSE IMPLIES LPAR NAND NOR NOT OR RPAR TRUE XORexp : exp EQUIVALENT expexp : exp IMPLIES expexp : exp OR expexp : exp NOR expexp : exp XOR expexp : exp AND expexp : exp NAND expexp : NOT expexp : LPAR exp RPARexp : TRUEexp : FALSE'
    
_lr_action_items = {'NOT':([0,2,3,6,7,8,9,10,11,12,],[2,2,2,2,2,2,2,2,2,2,]),'LPAR':([0,2,3,6,7,8,9,10,11,12,],[3,3,3,3,3,3,3,3,3,3,]),'TRUE':([0,2,3,6,7,8,9,10,11,12,],[4,4,4,4,4,4,4,4,4,4,]),'FALSE':([0,2,3,6,7,8,9,10,11,12,],[5,5,5,5,5,5,5,5,5,5,]),'$end':([1,4,5,13,15,16,17,18,19,20,21,22,],[0,-10,-11,-8,-1,-2,-3,-4,-5,-6,-7,-9,]),'EQUIVALENT':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[6,-10,-11,-8,6,-1,-2,-3,-4,-5,-6,-7,-9,]),'IMPLIES':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[7,-10,-11,-8,7,-1,-2,-3,-4,-5,-6,-7,-9,]),'OR':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[8,-10,-11,-8,8,8,8,-3,-4,-5,-6,-7,-9,]),'NOR':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[9,-10,-11,-8,9,9,9,-3,-4,-5,-6,-7,-9,]),'XOR':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[10,-10,-11,-8,10,10,10,10,10,-5,-6,-7,-9,]),'AND':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[11,-10,-11,-8,11,11,11,11,11,11,-6,-7,-9,]),'NAND':([1,4,5,13,14,15,16,17,18,19,20,21,22,],[12,-10,-11,-8,12,12,12,12,12,12,-6,-7,-9,]),'RPAR':([4,5,13,14,15,16,17,18,19,20,21,22,],[-10,-11,-8,22,-1,-2,-3,-4,-5,-6,-7,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exp':([0,2,3,6,7,8,9,10,11,12,],[1,13,14,15,16,17,18,19,20,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> exp EQUIVALENT exp','exp',3,'p_exp_1','sintatico.py',14),
  ('exp -> exp IMPLIES exp','exp',3,'p_exp_2','sintatico.py',18),
  ('exp -> exp OR exp','exp',3,'p_exp_3','sintatico.py',22),
  ('exp -> exp NOR exp','exp',3,'p_exp_4','sintatico.py',26),
  ('exp -> exp XOR exp','exp',3,'p_exp_5','sintatico.py',30),
  ('exp -> exp AND exp','exp',3,'p_exp_6','sintatico.py',34),
  ('exp -> exp NAND exp','exp',3,'p_exp_7','sintatico.py',38),
  ('exp -> NOT exp','exp',2,'p_exp_8','sintatico.py',42),
  ('exp -> LPAR exp RPAR','exp',3,'p_exp_9','sintatico.py',46),
  ('exp -> TRUE','exp',1,'p_exp_10','sintatico.py',50),
  ('exp -> FALSE','exp',1,'p_exp_11','sintatico.py',54),
]
